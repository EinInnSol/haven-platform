-- HAVEN PLATFORM DATABASE SCHEMA
-- Cloudflare D1 (SQLite)

-- CLIENTS TABLE
CREATE TABLE IF NOT EXISTS clients (
  id TEXT PRIMARY KEY,
  created_at INTEGER NOT NULL,
  updated_at INTEGER NOT NULL,
  
  -- Basic Info
  first_name TEXT NOT NULL,
  last_name TEXT NOT NULL,
  dob TEXT,
  ssn_last4 TEXT,
  phone TEXT,
  email TEXT,
  
  -- Demographics
  gender TEXT,
  race TEXT,
  ethnicity TEXT,
  veteran_status TEXT,
  
  -- Housing Status
  current_living_situation TEXT NOT NULL,
  homeless_start_date TEXT,
  times_homeless_past_3years INTEGER,
  total_months_homeless INTEGER,
  
  -- Risk Assessment (generated by AI)
  risk_level TEXT, -- high, medium, low
  vulnerability_score INTEGER,
  housing_priority TEXT, -- PSH, RRH, emergency, prevention
  
  -- HUD VI-SPDAT Responses (JSON)
  assessment_data TEXT, -- Stored as JSON string
  
  -- Status
  status TEXT NOT NULL DEFAULT 'active', -- active, housed, inactive
  assigned_caseworker_id TEXT,
  
  -- Metadata
  intake_source TEXT, -- qr_code, walk_in, referral
  intake_location TEXT,
  notes TEXT,
  
  FOREIGN KEY (assigned_caseworker_id) REFERENCES caseworkers(id)
);

-- CASEWORKERS TABLE
CREATE TABLE IF NOT EXISTS caseworkers (
  id TEXT PRIMARY KEY,
  created_at INTEGER NOT NULL,
  updated_at INTEGER NOT NULL,
  
  -- Basic Info
  name TEXT NOT NULL,
  email TEXT NOT NULL UNIQUE,
  phone TEXT,
  
  -- Auth
  password_hash TEXT NOT NULL,
  role TEXT NOT NULL DEFAULT 'caseworker', -- caseworker, supervisor, admin, city_official
  
  -- Availability
  max_caseload INTEGER DEFAULT 30,
  current_caseload INTEGER DEFAULT 0,
  available BOOLEAN DEFAULT TRUE,
  
  -- Specializations (JSON array)
  specializations TEXT, -- ["veterans", "youth", "families", "mental_health"]
  
  -- Preferences
  preferred_contact_method TEXT,
  working_hours TEXT, -- JSON: {"monday": "9-5", ...}
  
  -- Status
  status TEXT NOT NULL DEFAULT 'active', -- active, on_leave, inactive
  
  -- Metadata
  hire_date TEXT,
  certifications TEXT, -- JSON array
  bio TEXT
);

-- ASSIGNMENTS TABLE (Case assignments)
CREATE TABLE IF NOT EXISTS assignments (
  id TEXT PRIMARY KEY,
  created_at INTEGER NOT NULL,
  updated_at INTEGER NOT NULL,
  
  client_id TEXT NOT NULL,
  caseworker_id TEXT NOT NULL,
  
  -- Assignment details
  assigned_date INTEGER NOT NULL,
  status TEXT NOT NULL DEFAULT 'active', -- active, completed, transferred, closed
  priority TEXT, -- urgent, high, medium, low
  
  -- Case tracking
  first_contact_date INTEGER,
  last_contact_date INTEGER,
  total_contacts INTEGER DEFAULT 0,
  housing_placed_date INTEGER,
  case_closed_date INTEGER,
  closure_reason TEXT,
  
  -- Goals & Plans
  housing_goal TEXT,
  case_plan TEXT, -- JSON: goals, actions, barriers, progress
  
  -- Outcomes
  housing_type_placed TEXT, -- PSH, RRH, emergency, family, other
  days_to_housing INTEGER,
  successful_outcome BOOLEAN,
  
  FOREIGN KEY (client_id) REFERENCES clients(id) ON DELETE CASCADE,
  FOREIGN KEY (caseworker_id) REFERENCES caseworkers(id)
);

-- CASE NOTES TABLE
CREATE TABLE IF NOT EXISTS case_notes (
  id TEXT PRIMARY KEY,
  created_at INTEGER NOT NULL,
  
  assignment_id TEXT NOT NULL,
  caseworker_id TEXT NOT NULL,
  client_id TEXT NOT NULL,
  
  -- Note details
  note_type TEXT NOT NULL, -- contact, progress, incident, housing, referral, other
  contact_type TEXT, -- phone, in_person, email, text, home_visit
  
  note_content TEXT NOT NULL,
  
  -- AI assistance
  ai_generated BOOLEAN DEFAULT FALSE,
  ai_suggestions TEXT, -- JSON array of AI recommendations
  
  -- Attachments
  attachments TEXT, -- JSON array of file URLs
  
  -- Metadata
  is_private BOOLEAN DEFAULT FALSE,
  tags TEXT, -- JSON array
  
  FOREIGN KEY (assignment_id) REFERENCES assignments(id) ON DELETE CASCADE,
  FOREIGN KEY (caseworker_id) REFERENCES caseworkers(id),
  FOREIGN KEY (client_id) REFERENCES clients(id)
);

-- RESOURCES TABLE (Housing, services, programs)
CREATE TABLE IF NOT EXISTS resources (
  id TEXT PRIMARY KEY,
  created_at INTEGER NOT NULL,
  updated_at INTEGER NOT NULL,
  
  -- Basic Info
  name TEXT NOT NULL,
  organization TEXT,
  resource_type TEXT NOT NULL, -- housing, food, health, employment, legal, transportation, etc.
  sub_type TEXT, -- PSH, RRH, emergency_shelter, transitional, etc.
  
  -- Contact
  phone TEXT,
  email TEXT,
  address TEXT,
  website TEXT,
  
  -- Capacity
  total_capacity INTEGER,
  current_availability INTEGER,
  waitlist_length INTEGER,
  avg_wait_time_days INTEGER,
  
  -- Eligibility (JSON)
  eligibility_criteria TEXT,
  
  -- Details
  description TEXT,
  services_provided TEXT, -- JSON array
  hours_of_operation TEXT,
  
  -- Metadata
  status TEXT DEFAULT 'active', -- active, at_capacity, closed, seasonal
  last_verified_date INTEGER,
  notes TEXT
);

-- REFERRALS TABLE
CREATE TABLE IF NOT EXISTS referrals (
  id TEXT PRIMARY KEY,
  created_at INTEGER NOT NULL,
  updated_at INTEGER NOT NULL,
  
  client_id TEXT NOT NULL,
  caseworker_id TEXT NOT NULL,
  resource_id TEXT NOT NULL,
  
  -- Referral details
  referral_date INTEGER NOT NULL,
  status TEXT NOT NULL DEFAULT 'pending', -- pending, accepted, rejected, completed, expired
  priority TEXT, -- urgent, high, medium, low
  
  -- Follow-up
  follow_up_date INTEGER,
  outcome TEXT,
  outcome_notes TEXT,
  
  -- Communication
  referral_letter TEXT, -- AI-generated referral letter
  response_received_date INTEGER,
  
  FOREIGN KEY (client_id) REFERENCES clients(id) ON DELETE CASCADE,
  FOREIGN KEY (caseworker_id) REFERENCES caseworkers(id),
  FOREIGN KEY (resource_id) REFERENCES resources(id)
);

-- QR CODES TABLE
CREATE TABLE IF NOT EXISTS qr_codes (
  id TEXT PRIMARY KEY,
  created_at INTEGER NOT NULL,
  
  -- QR details
  code TEXT NOT NULL UNIQUE,
  location TEXT NOT NULL,
  campaign_name TEXT,
  
  -- Tracking
  scans_count INTEGER DEFAULT 0,
  successful_intakes INTEGER DEFAULT 0,
  
  -- Status
  active BOOLEAN DEFAULT TRUE,
  expires_at INTEGER,
  
  -- Metadata
  created_by_caseworker_id TEXT,
  notes TEXT,
  
  FOREIGN KEY (created_by_caseworker_id) REFERENCES caseworkers(id)
);

-- INTAKE SESSIONS TABLE (Track incomplete intakes)
CREATE TABLE IF NOT EXISTS intake_sessions (
  id TEXT PRIMARY KEY,
  created_at INTEGER NOT NULL,
  updated_at INTEGER NOT NULL,
  
  qr_code_id TEXT,
  
  -- Progress
  current_step INTEGER DEFAULT 0,
  total_steps INTEGER DEFAULT 48,
  completed BOOLEAN DEFAULT FALSE,
  
  -- Data (stored incrementally as JSON)
  form_data TEXT,
  
  -- Session management
  expires_at INTEGER,
  client_id TEXT, -- Set when completed
  
  FOREIGN KEY (qr_code_id) REFERENCES qr_codes(id),
  FOREIGN KEY (client_id) REFERENCES clients(id)
);

-- SYSTEM ANALYTICS TABLE (For city dashboard)
CREATE TABLE IF NOT EXISTS analytics_snapshots (
  id TEXT PRIMARY KEY,
  snapshot_date INTEGER NOT NULL,
  
  -- System metrics
  total_clients INTEGER,
  active_cases INTEGER,
  new_clients_this_month INTEGER,
  housing_placements_this_month INTEGER,
  
  -- Performance metrics
  avg_days_to_housing REAL,
  successful_outcomes_rate REAL,
  resource_utilization_rate REAL,
  
  -- Demographic breakdown (JSON)
  demographics_data TEXT,
  
  -- Trend data (JSON)
  trends_data TEXT,
  
  -- AI insights
  ai_insights TEXT, -- Generated municipal insights
  ai_recommendations TEXT -- JSON array of recommendations
);

-- INDEXES for performance
CREATE INDEX IF NOT EXISTS idx_clients_caseworker ON clients(assigned_caseworker_id);
CREATE INDEX IF NOT EXISTS idx_clients_status ON clients(status);
CREATE INDEX IF NOT EXISTS idx_assignments_client ON assignments(client_id);
CREATE INDEX IF NOT EXISTS idx_assignments_caseworker ON assignments(caseworker_id);
CREATE INDEX IF NOT EXISTS idx_assignments_status ON assignments(status);
CREATE INDEX IF NOT EXISTS idx_case_notes_assignment ON case_notes(assignment_id);
CREATE INDEX IF NOT EXISTS idx_case_notes_client ON case_notes(client_id);
CREATE INDEX IF NOT EXISTS idx_referrals_client ON referrals(client_id);
CREATE INDEX IF NOT EXISTS idx_referrals_status ON referrals(status);
CREATE INDEX IF NOT EXISTS idx_qr_codes_active ON qr_codes(active);
CREATE INDEX IF NOT EXISTS idx_intake_sessions_expires ON intake_sessions(expires_at);